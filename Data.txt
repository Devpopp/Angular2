import pandas as pd
from xml.etree.ElementTree import Element, SubElement, tostring, ElementTree

# Load data from XLSX
df = pd.read_excel('portfolio_data.xlsx')

# Function to create XML elements from DataFrame row
def create_xml_element(row):
    object_element = Element('object')
    object_element.set('type', row['Type'])
    object_element.set('version', str(row['Version']))

    # Adding properties
    for col in df.columns:
        if col not in ['Type', 'Version', 'Parent ID', 'Condition Type', 'Grouping Operator', 'Condition Value']:
            if pd.isna(row[col]):
                continue
            property_element = SubElement(object_element, 'property')
            property_element.set('name', col.replace(' ', ''))
            property_element.set('value', str(row[col]))
            property_element.set('valueType', determine_value_type(row[col]))

    # Adding conditions
    if 'Condition Type' in row and pd.notna(row['Condition Type']):
        condition_element = SubElement(object_element, 'condition')
        condition_element.set('type', row['Condition Type'])
        condition_element.set('operator', row['Grouping Operator'])
        condition_element.text = str(row['Condition Value'])

    return object_element

# Function to determine value type (optional)
def determine_value_type(value):
    if isinstance(value, bool):
        return 'boolean'
    elif isinstance(value, int):
        return 'integer'
    elif isinstance(value, float):
        return 'float'
    else:
        return 'string'

# Create a mapping of parent-child relationships
def build_hierarchy(df):
    hierarchy = {}
    for index, row in df.iterrows():
        parent_id = row['Parent ID']
        if parent_id not in hierarchy:
            hierarchy[parent_id] = []
        hierarchy[parent_id].append(row)
    return hierarchy

# Recursively build XML structure
def add_children(parent, hierarchy, parent_id):
    if parent_id in hierarchy:
        for row in hierarchy[parent_id]:
            child_element = create_xml_element(row)
            parent.append(child_element)
            add_children(child_element, hierarchy, row['Name'])

# Create the root element
root = Element('root')

# Build the hierarchy from the DataFrame
hierarchy = build_hierarchy(df)

# Add children to the root based on the hierarchy
add_children(root, hierarchy, 'root')

# Save XML to file
tree = ElementTree(root)
tree.write('output.xml', encoding='utf-8', xml_declaration=True)

print("XML file with hierarchical conditions created successfully!")
