To generate XML similar to the format in image 1, you can use Python's `xml.etree.ElementTree` to create a more structured and detailed XML file. Here's an example script that reads from an Excel file and creates XML with nested elements as shown in image 1.

### Example Python Script

```python
import pandas as pd
from xml.etree.ElementTree import Element, SubElement, tostring, ElementTree

# Load data from XLSX
df = pd.read_excel('portfolio_data.xlsx')

# Function to create XML elements from DataFrame row
def create_xml_element(row):
    object_element = Element('object')
    object_element.set('stamp', str(row['Stamp']))
    object_element.set('type', row['Type'])
    object_element.set('version', str(row['Version']))

    for col in df.columns:
        if col not in ['Stamp', 'Type', 'Version']:
            if pd.isna(row[col]):
                continue
            property_element = SubElement(object_element, 'property')
            property_element.set('name', col)
            property_element.set('value', str(row[col]))
            # Optional: Set valueType if needed
            property_element.set('valueType', determine_value_type(row[col]))

    return object_element

# Function to determine value type (optional)
def determine_value_type(value):
    if isinstance(value, bool):
        return 'boolean'
    elif isinstance(value, int):
        return 'integer'
    elif isinstance(value, float):
        return 'float'
    else:
        return 'string'

# Create the root element
root = Element('root')

# Iterate through each row and add to root
for index, row in df.iterrows():
    object_element = create_xml_element(row)
    root.append(object_element)

# Save XML to file
tree = ElementTree(root)
tree.write('output.xml', encoding='utf-8', xml_declaration=True)

print("XML file created successfully!")
```

### Example Data in Excel (`portfolio_data.xlsx`)

Here is an example of how your Excel file might look, considering the columns discussed earlier:

| Stamp | Type | Object ID | Branch ID | Name | Description | Version | Value | Value Type | Data Source | Model Name | Data Model | Additional Indices | Clustered | Unique | Fields | Distribution Style | Level ID | Level Name | Default Value | Allow Nulls | Allow Nulls Fixed | Size | Lookup Source | Condition Type | Condition Tree | Grouping Operator | Instance Key Rules | Instance Selection Rule | Portfolio Result Alias | Hierarchy | Root Node |
|-------|------|-----------|-----------|------|-------------|---------|-------|------------|-------------|------------|------------|--------------------|-----------|--------|--------|--------------------|---------|------------|---------------|-------------|-------------------|------|--------------|----------------|----------------|------------------|------------------|--------------------|----------------|----------|----------|
| abc123| Portfolio | id123 | branch1 | AD | Analysis of deposits | 5.0 | value1 | string | source1 | model1 | data_model1 | index1 | False | True | field1 | style1 | level1 | Level Name | default | True | False | 10 | lookup1 | type1 | tree1 | AND | rule1 | rule2 | alias1 | hierarchy1 | root1 |

This script and the Excel file format should help you generate XML that matches the structure shown in image 1. Ensure you have the necessary columns in your Excel file and update the script if you need to handle more specific nested elements or structures.

### Notes

1. **XML Structure**: The script creates an XML file with nested properties, matching the hierarchical structure seen in your example.
2. **Customization**: Adjust the script based on the exact structure and additional elements you need.
3. **Value Type**: The script includes a simple function to determine the value type; customize it if more specific types are needed.

Feel free to modify this script based on the specific XML structure and content you need!
