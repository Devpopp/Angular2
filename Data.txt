import pandas as pd
from xml.etree.ElementTree import Element, SubElement, tostring
from xml.dom import minidom

# Load data from XLSX
df = pd.read_excel('portfolio_data.xlsx')

# Function to determine value type
def determine_value_type(value):
    if isinstance(value, bool):
        return 'boolean'
    elif isinstance(value, int):
        return 'integer'
    elif isinstance(value, float):
        return 'float'
    else:
        return 'string'

# Function to create XML element from DataFrame row
def create_xml_element(row):
    object_element = Element('object')
    object_element.set('type', row.get('Type', 'UnknownType'))
    object_element.set('version', str(row.get('Version', '1.0')))
    object_element.set('stamp', str(row.get('Stamp', 'UnknownStamp')))
    object_element.set('objectId', str(row.get('Object ID', 'UnknownID')))

    for col in df.columns:
        if col not in ['Type', 'Version', 'Stamp', 'Object ID', 'Parent ID', 'Node', 'Nested Elements', 'Conditions']:
            if pd.notna(row[col]):
                property_element = SubElement(object_element, 'property')
                property_element.set('name', col)
                property_element.set('value', str(row[col]))
                property_element.set('valueType', determine_value_type(row[col]))

    if pd.notna(row.get('Nested Elements')):
        nested_elements = str(row['Nested Elements']).split(';')
        for nested_element in nested_elements:
            nested_parts = nested_element.strip().split('|')
            if len(nested_parts) == 3:
                nested_obj = SubElement(object_element, 'object')
                nested_obj.set('type', nested_parts[0])
                nested_property = SubElement(nested_obj, 'property')
                nested_property.set('name', nested_parts[1])
                nested_property.set('value', nested_parts[2])
                nested_property.set('valueType', 'string')

    if pd.notna(row.get('Conditions')):
        conditions = str(row['Conditions']).split(';')
        for condition in conditions:
            condition_parts = condition.strip().split('|')
            if len(condition_parts) == 4:
                condition_obj = SubElement(object_element, 'object')
                condition_obj.set('type', condition_parts[0])
                condition_property = SubElement(condition_obj, 'property')
                condition_property.set('name', condition_parts[1])
                condition_property.set('value', condition_parts[2])
                condition_property.set('valueType', condition_parts[3])

    return object_element

# Function to build hierarchy from DataFrame
def build_hierarchy(df):
    hierarchy = {}
    for index, row in df.iterrows():
        parent_id = row['Parent ID']
        if parent_id not in hierarchy:
            hierarchy[parent_id] = []
        hierarchy[parent_id].append(row)
    return hierarchy

# Function to recursively add children to parent element
def add_children(parent, hierarchy, parent_id):
    if parent_id in hierarchy:
        for row in hierarchy[parent_id]:
            child_element = create_xml_element(row)
            parent.append(child_element)
            add_children(child_element, hierarchy, row['Node'])

# Function to pretty-print XML
def pretty_print_element(element):
    rough_string = tostring(element, 'utf-8')
    reparsed = minidom.parseString(rough_string)
    return reparsed.toprettyxml(indent="    ")

# Main function to generate XML
def generate_xml(df):
    hierarchy = build_hierarchy(df)
    root_elements = []
    add_children(root_elements, hierarchy, 'root')

    for element in root_elements:
        pretty_xml_str = pretty_print_element(element)
        with open('output.xml', 'w') as file:
            file.write(pretty_xml_str)

    print("XML file created successfully!")

# Run the XML generation
generate_xml(df)

