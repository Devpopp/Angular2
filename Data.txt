from flask import Flask, request, jsonify, session
from flask_jwt_extended import JWTManager, create_access_token, jwt_required

app = Flask(__name__)
app.config['JWT_SECRET_KEY'] = 'f428bcc471e58b22fa3007d076750c22f634eee125ddddc8ac07ee9f9e683'
app.config['JWT_TOKEN_LOCATION'] = ['headers']
jwt = JWTManager(app)

required_functional_group = "FGLBGFTCODR"

def fetch_user_groups(username):
    user = users.get(username)
    if user:
        return user['groups']
    return None

@app.route('/api/login', methods=['POST'])
def login():
    data = request.json
    username = data.get('username')
    if username in users:
        user = users[username]
        user_groups = fetch_user_groups(username)
        if user_groups and required_functional_group in user_groups:
            access_token = create_access_token(identity=username)
            return jsonify({
                "message": "User is found and authorized",
                "access_token": access_token,
                "brid": user['brid'],
                "first_name": user['first_name']
            })
        else:
            return jsonify({"message": "User not authorized for this functional group"}), 403
    return jsonify({"message": "User not found"}), 404

@app.route('/api/validate_group', methods=['GET'])
@jwt_required()
def validate_group():
    username = request.args.get('username')
    if not username:
        return jsonify({"msg": "Username is required"}), 400
    user_groups = fetch_user_groups(username)
    if not user_groups:
        return jsonify({"msg": "User not found"}), 404
    if required_functional_group not in user_groups:
        return jsonify({"msg": "Unauthorized"}), 401
    response = {
        "access_token": jwt.encode({"username": username}, app.config["JWT_SECRET_KEY"], algorithm="HS256"),
        "brid": users[username]["brid"],
        "first_name": users[username]["first_name"],
        "message": "User is found and authorized"
    }
    return jsonify(response), 200

@app.route('/api/users_in_group', methods=['GET'])
def users_in_group():
    group = request.args.get('group')
    users_in_group = [user for user in users.values() if group in user['groups']]
    return jsonify(users_in_group)

if __name__ == '__main__':
    app.run(debug=True)
